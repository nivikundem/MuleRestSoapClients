package com.itf.vehicle.casefile;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.2
 * 2015-09-08T17:37:53.212+01:00
 * Generated source version: 3.1.2
 * 
 */
@WebServiceClient(name = "UploadProcessorService", 
              //    wsdlLocation = "file:/C:/Work/Workspaces/eclipselunaworkspace/QE2Client/WebContent/WEB-INF/WSWsdl.wsdl",
                  wsdlLocation = "file:/C:/JobSearch/Workspace/VehicleWS/WebContent/WEB-INF/Vehicle.wsdl",
                  targetNamespace = "http://casefile.Vehicle.itf.com/") 
public class UploadProcessorService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://casefile.Vehicle.itf.com/", "UploadProcessorService");
    public final static QName UploadProcessorPort = new QName("http://casefile.Vehicle.itf.com/", "UploadProcessorPort");
    static {
        URL url = null;
        try {
         //   url = new URL("file:/C:/Work/Workspaces/eclipselunaworkspace/QE2Client/WebContent/WEB-INF/WSWsdl.wsdl");
            url = new URL("file:/C:/JobSearch/Workspace/VehicleWS/WebContent/WEB-INF/Vehicle.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(UploadProcessorService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/C:/JobSearch/Workspace/VehicleWS/WebContent/WEB-INF/Vehicle.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public UploadProcessorService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public UploadProcessorService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public UploadProcessorService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public UploadProcessorService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public UploadProcessorService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public UploadProcessorService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns DocumentUploadServicePortType
     */
    @WebEndpoint(name = "UploadProcessorPort")
    public DocumentUploadServicePortType getUploadProcessorPort() {
        return super.getPort(UploadProcessorPort, DocumentUploadServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns DocumentUploadServicePortType
     */
    @WebEndpoint(name = "UploadProcessorPort")
    public DocumentUploadServicePortType getUploadProcessorPort(WebServiceFeature... features) {
        return super.getPort(UploadProcessorPort, DocumentUploadServicePortType.class, features);
    }

}
